{"ast":null,"code":"var _jsxFileName = \"/Users/vien/Desktop/Car-Dealership-Project-CS340/cardealership/src/pages/login.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  // Define state variables for username, password, and error message\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  // Function to handle form submission (logins)\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent the page from reloading \n    try {\n      // Send a POST request to the login endpoint\n      const response = await fetch('http://localhost:5000/login', {\n        method: 'POST',\n        // HTTP method for sending data to the server\n        headers: {\n          'Content-Type': 'application/json' // Set the content type to JSON\n        },\n        body: JSON.stringify({\n          username,\n          password\n        }) // Send the username and password in the request body\n      });\n\n      // Check if the response status indicates an error\n      if (!response.ok) {\n        throw new Error('Invalid credentials'); // Throw an error if login credentials are invalid\n      }\n\n      // Parse the response data as JSON\n      const data = await response.json();\n\n      // Save the authentication token to local storage\n      localStorage.setItem('token', data.token);\n\n      // Notify the user of a successful login\n      alert('Login successful!');\n    } catch (error) {\n      // Set an error message if the login fails\n      setError('Invalid credentials');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"login-form\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Car Dealership Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\" // Text input field\n          ,\n          value: username // Bind input value to the username state\n          ,\n          onChange: e => setUsername(e.target.value) // Update username state on input change\n          ,\n          required: true // Make the field required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\" // Password input field\n          ,\n          value: password // Bind input value to the password state\n          ,\n          onChange: e => setPassword(e.target.value) // Update password state on input change\n          ,\n          required: true // Make the field required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"lABZ+K3zbnEaFQvlduiFXLNOf5A=\");\n_c = Login;\nexport default Login; // Export the Login component for use in other parts of the application\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Login","_s","username","setUsername","password","setPassword","error","setError","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","alert","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","style","color","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/Users/vien/Desktop/Car-Dealership-Project-CS340/cardealership/src/pages/login.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { useState } from 'react';\nconst Login: React.FC = () => {\n    // Define state variables for username, password, and error message\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    // Function to handle form submission (logins)\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault(); // Prevent the page from reloading \n        try {\n            // Send a POST request to the login endpoint\n            const response = await fetch('http://localhost:5000/login', {\n                method: 'POST', // HTTP method for sending data to the server\n                headers: {\n                    'Content-Type': 'application/json', // Set the content type to JSON\n                },\n                body: JSON.stringify({ username, password }), // Send the username and password in the request body\n            });\n\n            // Check if the response status indicates an error\n            if (!response.ok) {\n                throw new Error('Invalid credentials'); // Throw an error if login credentials are invalid\n            }\n\n            // Parse the response data as JSON\n            const data = await response.json();\n\n            // Save the authentication token to local storage\n            localStorage.setItem('token', data.token);\n\n            // Notify the user of a successful login\n            alert('Login successful!');\n        } catch (error) {\n            // Set an error message if the login fails\n            setError('Invalid credentials');\n        }\n    };\n\n    return (\n        <div className=\"login-container\"> {/* This div wraps the entire form */}\n            <form onSubmit={handleSubmit} className=\"login-form\"> {/* Handle form submission */}\n                <h1>Car Dealership Login</h1> {/* Display the form title */}\n                \n                {/* Display an error message if one exists */}\n                {error && <p style={{ color: 'red' }}>{error}</p>}\n                \n                <div>\n                    <label>Username:</label> {/* Label for the username input */}\n                    <input\n                        type=\"text\" // Text input field\n                        value={username} // Bind input value to the username state\n                        onChange={(e) => setUsername(e.target.value)} // Update username state on input change\n                        required // Make the field required\n                    />\n                </div>\n                <div>\n                    <label>Password:</label> {/* Label for the password input */}\n                    <input\n                        type=\"password\" // Password input field\n                        value={password} // Bind input value to the password state\n                        onChange={(e) => setPassword(e.target.value)} // Update password state on input change\n                        required // Make the field required\n                    />\n                </div>\n                <button type=\"submit\">Login</button> {/* Submit button for the form */}\n            </form>\n        </div>\n    );\n};\n\nexport default Login; // Export the Login component for use in other parts of the application"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}